[
        'java',
        'spring-boot'
].each { apply plugin: it }

group = 'com.jlg'
version = '1.0.0'

jar {
    baseName = 'spring-boot-spa-starter'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "commons-beanutils:commons-beanutils:${commonBeanUtilsVersion}",
            "com.google.guava:guava:${guavaVersion}",
            "com.squareup.okhttp:okhttp:${okHttpVersion}",
            "com.netflix.hystrix:hystrix-core:${hystrixVersion}",
            "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-security:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}",
            "org.springframework.data:spring-data-mongodb:${mongoDbSpringDataVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "commons-io:commons-io:${commonsIOVersion}",
            "com.squareup.retrofit:retrofit:${retrofitVersion}",
            "com.squareup.retrofit:converter-jackson:${retrofitVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test',
            "org.springframework.security:spring-security-test:${springSecurityTestVersion}",
            "com.jayway.restassured:rest-assured:${restAssuredVersion}"
}

bootRun {
    systemProperties = System.properties
}

def cliJAR = "${projectDir}/lib/cloud-env-cli-spring-boot-spa-starter-1.0.0.jar"
def activeConfig = "default";
def jarDir = "app/build/libs";
def jarName = "spring-boot-spa-starter-1.0.0.jar";
def repoUrl = "https://github.com/jgaerke/spring-boot-spa-starter.git";
def repoName = "spring-boot-spa-starter";
def dbServerName = "${activeConfig}-db";
def rpServername = "${activeConfig}-rp";
def backupFileName = "...";


task(gulp, type: Exec) {
    commandLine "gulp"
    args 'test'
}

build.dependsOn gulp

task(createEnv, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'create', '-f', "${projectDir}/config/${activeConfig}.json"
}

task(resetEnv, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'reset', '-f', "${projectDir}/config/${activeConfig}.json"
}


task(destroyEnv, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'destroy', '-f', "${projectDir}/config/${activeConfig}.json"
}

task(activateEnv, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'activate', '-f', "${projectDir}/config/${activeConfig}.json", '-s', "${rpServername}"
}

task(deactivateEnv, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'deactivate', '-f', "${projectDir}/config/${activeConfig}.json"
}

task(deployApp, dependsOn: [':app:assemble'], type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'deploy-app', '-f', "${projectDir}/config/${activeConfig}.json", '-t', 'app', '-rn', "${repoName}", '-ru', "${repoUrl}", '-jd', "${jarDir}", '-j', "${jarName}"
}

task(backupDB, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'backup-db', '-f', "${projectDir}/config/${activeConfig}.json", '-s', "${dbServerName}"
}

task(restoreBackupToDB, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'restore-db', '-f', "${projectDir}/config/${activeConfig}.json", '-s', "${dbServerName}", '-bfn', "${backupFileName}"
}

task(restoreLatestBackupToDB, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'restore-db', '-f', "${projectDir}/config/${activeConfig}.json", '-s', "${dbServerName}"
}

task(destroyAllServers, type: Exec) {
    commandLine "java"
    args '-jar', cliJAR, 'destroy-all-servers'
}

task integrationTest(type: Test) {
    description = "Run integration tests."
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
