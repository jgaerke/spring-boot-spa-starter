import static org.gradle.api.tasks.bundling.Jar.*

buildscript {
  ext {
    springBootVersion = '1.4.2.RELEASE'
  }
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.7")
  }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "com.ewerk.gradle.plugins.querydsl"


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  jcenter()
}

group = 'com.jlg'
version = '1.0.0'

jar {
  baseName = 'spring-boot-spa-starter'
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/java')
    }
    resources.srcDir file('src/integration-test/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functional-test/java')
    }
    resources.srcDir file('src/functional-test/resources')
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile('org.springframework.boot:spring-boot-devtools')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile('org.springframework.boot:spring-boot-starter-thymeleaf')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('org.springframework.boot:spring-boot-starter-actuator')
  compile('org.springframework.boot:spring-boot-starter-aop')
  compile('org.springframework.boot:spring-boot-starter-data-rest')
  compile('org.springframework.boot:spring-boot-starter-data-mongodb')
  compile('org.springframework.session:spring-session-data-mongo:1.2.2.RELEASE')
  compile('nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.2.8')
  compile('com.google.guava:guava:19.0')
  compile('commons-beanutils:commons-beanutils:1.9.2')
  compile('org.apache.commons:commons-io:1.3.2')
  compile('org.apache.httpcomponents:httpclient:4.5.2')
  compile('commons-lang:commons-lang:2.6')
  compile('org.projectlombok:lombok:1.16.10')
  compile('com.mysema.querydsl:querydsl-mongodb:3.7.4')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('com.jayway.restassured:rest-assured:2.4.1')
  testCompile('org.springframework.security:spring-security-test:4.0.3.RELEASE')
}

bootRun {
  systemProperties = System.properties
  addResources = true
}

task integrationTest(type: Test) {
  description = "Run integration tests."
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test) {
  description = "Run functional tests."
  testClassesDir = sourceSets.functionalTest.output.classesDir
  classpath = sourceSets.functionalTest.runtimeClasspath
}

querydsl {
  // we use mongodb
  springDataMongo = true
}