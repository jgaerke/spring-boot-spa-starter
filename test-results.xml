<?xml version="1.0"?>
<testsuites>
  <testsuite name="PhantomJS 1.9.8 (Linux)" package="unit" timestamp="2016-01-03T19:08:36" id="0" hostname="jgaerke" tests="60" errors="0" failures="0" time="0.017">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.9.8 Safari/534.34"/>
    </properties>
    <testcase name="should wire up form validation upon mount" time="0.002" classname="unit PhantomJS 1.9.8 (Linux).Login"/>
    <testcase name="should get credential inputs from form and return as object" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Login"/>
    <testcase name="should route to Home on success" time="0" classname="unit PhantomJS 1.9.8 (Linux).Login"/>
    <testcase name="should handle error" time="0" classname="unit PhantomJS 1.9.8 (Linux).Login"/>
    <testcase name="should short circuit submit to server if input is in invalid state" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Login"/>
    <testcase name="should submit credentials to server for login and wire handlers accordingly" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Login"/>
    <testcase name="should wire up a validation upon mount" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).RecoverPassword"/>
    <testcase name="should get email input from form and return as object" time="0" classname="unit PhantomJS 1.9.8 (Linux).RecoverPassword"/>
    <testcase name="should route to PasswordResetInstructionsSent on success" time="0" classname="unit PhantomJS 1.9.8 (Linux).RecoverPassword"/>
    <testcase name="should handle error" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).RecoverPassword"/>
    <testcase name="should short circuit submit to server if input is in invalid state" time="0" classname="unit PhantomJS 1.9.8 (Linux).RecoverPassword"/>
    <testcase name="should submit credentials to server for recoverPassword and wire handlers accordingly" time="0" classname="unit PhantomJS 1.9.8 (Linux).RecoverPassword"/>
    <testcase name="should wire up form validation upon mount" time="0" classname="unit PhantomJS 1.9.8 (Linux).Registration"/>
    <testcase name="should get account inputs from form and return as object" time="0" classname="unit PhantomJS 1.9.8 (Linux).Registration"/>
    <testcase name="should route to Home on success" time="0" classname="unit PhantomJS 1.9.8 (Linux).Registration"/>
    <testcase name="should handle error" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Registration"/>
    <testcase name="should short circuit submit to server if input is in invalid state" time="0" classname="unit PhantomJS 1.9.8 (Linux).Registration"/>
    <testcase name="should submit account info to server for registration and wire handlers accordingly" time="0" classname="unit PhantomJS 1.9.8 (Linux).Registration"/>
    <testcase name="should wire ui dropdown on mount" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Container"/>
    <testcase name="should logout" time="0" classname="unit PhantomJS 1.9.8 (Linux).Container"/>
    <testcase name="should handle logout success" time="0" classname="unit PhantomJS 1.9.8 (Linux).Container"/>
    <testcase name="should handle error" time="0" classname="unit PhantomJS 1.9.8 (Linux).Container"/>
    <testcase name="should encode credentials" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should login" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should logout" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should create account" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should update account info" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should change password" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should handle recover password" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should reset password" time="0" classname="unit PhantomJS 1.9.8 (Linux).Account"/>
    <testcase name="should parse component references" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should handle fetch success" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should execute callback if fetch called with falsy components param" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should initialize array of components if non-array provided to fetch" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should fetch components" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should filter out previously compiled components before fetching components" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should compile" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should not compile previously compiled components" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should handle load completion" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should exit load completion if component array empty" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should load component" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should unmount previous component" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should handle mount completion" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should mount component" time="0" classname="unit PhantomJS 1.9.8 (Linux).ComponentLoader"/>
    <testcase name="should ..." time="0" classname="unit PhantomJS 1.9.8 (Linux).ErrorHandler"/>
    <testcase name="should dispatch requests" time="0" classname="unit PhantomJS 1.9.8 (Linux).Http"/>
    <testcase name="should perform GET" time="0" classname="unit PhantomJS 1.9.8 (Linux).Http"/>
    <testcase name="should perform POST" time="0" classname="unit PhantomJS 1.9.8 (Linux).Http"/>
    <testcase name="should perform PUT" time="0" classname="unit PhantomJS 1.9.8 (Linux).Http"/>
    <testcase name="should perform PATCH" time="0" classname="unit PhantomJS 1.9.8 (Linux).Http"/>
    <testcase name="should perform DELETE" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Http"/>
    <testcase name="should handle route change" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should handle route registration" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should register routes" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should start routing" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should get path" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should change window location if suggested route is an absolute URL" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should change window location if suggested route is a relative path" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should throw error if route name not registered" time="0.001" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <testcase name="should route to supplied name if registered" time="0" classname="unit PhantomJS 1.9.8 (Linux).Router"/>
    <system-out><![CDATA[
]]></system-out>
    <system-err/>
  </testsuite>
</testsuites>
